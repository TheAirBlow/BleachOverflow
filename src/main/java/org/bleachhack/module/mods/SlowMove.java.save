/*
 * This file is part of the BleachHack distribution (https://github.com/BleachDev/BleachHack/).
 * Copyright (c) 2021 Bleach and contributors.
 *
 * This source code is subject to the terms of the GNU General Public
 * License, version 3. If a copy of the GPL was not distributed with this
 * file, You can obtain one at: https://www.gnu.org/licenses/gpl-3.0.txt
 */
package org.bleachhack.module.mods;

import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.Vec3d;
import org.bleachhack.event.events.EventClientMove;
import org.bleachhack.event.events.EventSendMovementPackets;
import org.bleachhack.event.events.EventTick;
import org.bleachhack.eventbus.BleachSubscribe;
import org.bleachhack.module.Module;
import org.bleachhack.module.ModuleCategory;
import org.bleachhack.setting.module.SettingSlider;

public class SlowMove extends Module {
	private Vec3d lastPosition;
	private float lastPitch = -1;
	private float lastYaw = -1;

	public SlowMove() {
		super("BadGuard", KEY_UNBOUND, ModuleCategory.HACKERMAN, "Magically walk into WorldGuard areas on LiveOverflow.",
				new SettingSlider("Divider", 1, 100, 50, 9).withDesc("Speed is diviced by tis"));
	}

	@BleachSubscribe
	public void onTick(EventTick event) {
		var speed = getSetting(0).asSlider().getValueFloat();
		if (mc.player != null) {
			if (lastPosition == null) {
				lastPosition = mc.player.getPos();
				lastPitch = mc.player.getPitch();
				lastYaw = mc.player.getYaw();
			}

			float forward = mc.player.forwardSpeed;
			float side = mc.player.sidewaysSpeed;
			float yaw = mc.player.prevYaw + (mc.player.getYaw() - mc.player.prevYaw);

			if (forward != 0.0F) {
				if (side > 0.0F) {
					yaw += ((forward > 0.0F) ? -45 : 45);
				} else if (side < 0.0F) {
					yaw += ((forward > 0.0F) ? 45 : -45);
				}

				side = 0.0F;

				if (forward > 0.0F) {
					forward = 1.0F;
				} else if (forward < 0.0F) {
					forward = -1.0F;
				}
			}

			double sin = Math.sin(Math.toRadians(yaw + 90.0F));
			double cos = Math.cos(Math.toRadians(yaw + 90.0F));
			double dx = forward * speed * cos + side * speed * sin;
			double dz = forward * speed * sin - side * speed * cos;

			

			mc.player.updatePosition(mc.player.getPos().x + dx, mc.player.getPos().y, mc.player.getPos().z + dz);
			var delta = Math.pow(lastPosition.x - mc.player.getPos().x, 2)
					+ Math.pow(lastPosition.y - mc.player.getPos().y, 2)
					+ Math.pow(lastPosition.z - mc.player.getPos().z, 2);
			var angleDelta = Math.pow(lastYaw - mc.player.getYaw(), 2)
					+ Math.pow(lastPitch - mc.player.getPitch(), 2);
			if (delta - (1f / 256) < 0.2) {
				mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(99999999,
						99999999, 99999999, mc.player.isOnGround()));
				lastPosition = mc.player.getPos();
			}

			if (angleDelta - 16 < 2) {
				mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.LookAndOnGround(99999999,
						99999999, mc.player.isOnGround()));
				lastPosition = mc.player.getPos();
			}
		}
	}

	@BleachSubscribe
	public void onMovementPackets(EventSendMovementPackets event) {
		mc.player.setVelocity(Vec3d.ZERO);
		event.setCancelled(true);
	}

	@BleachSubscribe
	public void onClientMove(EventClientMove event) {
		event.setCancelled(true);
	}
}
